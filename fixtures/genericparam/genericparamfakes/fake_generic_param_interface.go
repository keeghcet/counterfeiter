// Code generated by counterfeiter. DO NOT EDIT.
package genericparamfakes

import (
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/genericparam"
	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/genericparam/genericparamtype"
	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/genericparam/genericreturntype"
)

type FakeGenericParamInterface struct {
	DoSomethingStub        func(genericparam.Generic[genericparamtype.T]) genericparam.Generic[genericreturntype.R]
	doSomethingMutex       sync.RWMutex
	doSomethingArgsForCall []struct {
		arg1 genericparam.Generic[genericparamtype.T]
	}
	doSomethingReturns struct {
		result1 genericparam.Generic[genericreturntype.R]
	}
	doSomethingReturnsOnCall map[int]struct {
		result1 genericparam.Generic[genericreturntype.R]
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGenericParamInterface) DoSomething(arg1 genericparam.Generic[genericparamtype.T]) genericparam.Generic[genericreturntype.R] {
	fake.doSomethingMutex.Lock()
	ret, specificReturn := fake.doSomethingReturnsOnCall[len(fake.doSomethingArgsForCall)]
	fake.doSomethingArgsForCall = append(fake.doSomethingArgsForCall, struct {
		arg1 genericparam.Generic[genericparamtype.T]
	}{arg1})
	stub := fake.DoSomethingStub
	fakeReturns := fake.doSomethingReturns
	fake.recordInvocation("DoSomething", []interface{}{arg1})
	fake.doSomethingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericParamInterface) DoSomethingCallCount() int {
	fake.doSomethingMutex.RLock()
	defer fake.doSomethingMutex.RUnlock()
	return len(fake.doSomethingArgsForCall)
}

func (fake *FakeGenericParamInterface) DoSomethingCalls(stub func(genericparam.Generic[genericparamtype.T]) genericparam.Generic[genericreturntype.R]) {
	fake.doSomethingMutex.Lock()
	defer fake.doSomethingMutex.Unlock()
	fake.DoSomethingStub = stub
}

func (fake *FakeGenericParamInterface) DoSomethingArgsForCall(i int) genericparam.Generic[genericparamtype.T] {
	fake.doSomethingMutex.RLock()
	defer fake.doSomethingMutex.RUnlock()
	argsForCall := fake.doSomethingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericParamInterface) DoSomethingReturns(result1 genericparam.Generic[genericreturntype.R]) {
	fake.doSomethingMutex.Lock()
	defer fake.doSomethingMutex.Unlock()
	fake.DoSomethingStub = nil
	fake.doSomethingReturns = struct {
		result1 genericparam.Generic[genericreturntype.R]
	}{result1}
}

func (fake *FakeGenericParamInterface) DoSomethingReturnsOnCall(i int, result1 genericparam.Generic[genericreturntype.R]) {
	fake.doSomethingMutex.Lock()
	defer fake.doSomethingMutex.Unlock()
	fake.DoSomethingStub = nil
	if fake.doSomethingReturnsOnCall == nil {
		fake.doSomethingReturnsOnCall = make(map[int]struct {
			result1 genericparam.Generic[genericreturntype.R]
		})
	}
	fake.doSomethingReturnsOnCall[i] = struct {
		result1 genericparam.Generic[genericreturntype.R]
	}{result1}
}

func (fake *FakeGenericParamInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGenericParamInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ genericparam.GenericParamInterface = new(FakeGenericParamInterface)
